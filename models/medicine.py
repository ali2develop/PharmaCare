# models/medicine.py

class Medicine:
    """
    Represents a medicine in the PharmaCare inventory.
    This class acts as a data model for the 'medicines' table.
    """
    def __init__(self, name, brand, category, price, stock,
                 low_stock_alert=10, expiry_date=None, description=None,
                 medicine_id=None, created_at=None):
        """
        Initializes a Medicine object.

        Args:
            name (str): Name of the medicine (e.g., "Paracetamol 500mg").
            brand (str): Brand name (e.g., "Tylenol").
            category (str): Category (e.g., "Pain Relief", "Antibiotic").
            price (float): Selling price of the medicine.
            stock (int): Current stock quantity.
            low_stock_alert (int, optional): Threshold for low stock alert. Defaults to 10.
            expiry_date (str, optional): Expiry date in YYYY-MM-DD format.
            description (str, optional): A brief description of the medicine.
            medicine_id (int, optional): Unique ID of the medicine. Auto-generated by DB if None.
            created_at (str, optional): Timestamp of medicine record creation. Auto-generated by DB if None.
        """
        self.id = medicine_id
        self.name = name
        self.brand = brand
        self.category = category
        self.price = price
        self.stock = stock
        self.low_stock_alert = low_stock_alert
        self.expiry_date = expiry_date
        self.description = description
        self.created_at = created_at

    def to_dict(self):
        """
        Converts the Medicine object to a dictionary, useful for database insertion.
        """
        return {
            "name": self.name,
            "brand": self.brand,
            "category": self.category,
            "price": self.price,
            "stock": self.stock,
            "low_stock_alert": self.low_stock_alert,
            "expiry_date": self.expiry_date,
            "description": self.description,
            "id": self.id,
            "created_at": self.created_at
        }

    @staticmethod
    def from_db_row(row):
        """
        Creates a Medicine object from a database row (tuple).
        Assumes row order: (id, name, brand, category, price, stock,
                           low_stock_alert, expiry_date, description, created_at)
        """
        if row:
            return Medicine(
                medicine_id=row[0],
                name=row[1],
                brand=row[2],
                category=row[3],
                price=row[4],
                stock=row[5],
                low_stock_alert=row[6],
                expiry_date=row[7],
                description=row[8],
                created_at=row[9]
            )
        return None

    def __repr__(self):
        return f"Medicine(ID={self.id}, Name='{self.name}', Stock={self.stock}, Price={self.price})"

# Example usage
if __name__ == "__main__":
    med1 = Medicine("Amoxicillin 250mg", "Amoxil", "Antibiotic", 25.0, 50, expiry_date="2025-12-31")
    print(med1)
    print(med1.to_dict())

    db_row = (1, "Paracetamol 500mg", "Tylenol", "Pain Relief", 12.5, 150, 20, "2024-10-15", "Fever reducer", "2023-05-01 11:30:00")
    med2 = Medicine.from_db_row(db_row)
    print(med2)
