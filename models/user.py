# models/user.py

class User:
    """
    Represents a user in the PharmaCare system.
    This class acts as a data model for the 'users' table.
    """
    def __init__(self, full_name, email, password, user_id=None, created_at=None):
        """
        Initializes a User object.

        Args:
            full_name (str): The full name of the user.
            email (str): The email address of the user (must be unique).
            password (str): The user's password (should be hashed in a real application).
            user_id (int, optional): The unique ID of the user. Auto-generated by DB if None.
            created_at (str, optional): Timestamp of user creation. Auto-generated by DB if None.
        """
        self.id = user_id
        self.full_name = full_name
        self.email = email
        self.password = password # Remember to hash this in a real app!
        self.created_at = created_at

    def to_dict(self):
        """
        Converts the User object to a dictionary, useful for database insertion.
        """
        return {
            "full_name": self.full_name,
            "email": self.email,
            "password": self.password,
            "id": self.id,
            "created_at": self.created_at
        }

    @staticmethod
    def from_db_row(row):
        """
        Creates a User object from a database row (tuple).
        Assumes row order: (id, full_name, email, password, created_at)
        """
        if row:
            return User(
                user_id=row[0],
                full_name=row[1],
                email=row[2],
                password=row[3],
                created_at=row[4]
            )
        return None

    def __repr__(self):
        return f"User(ID={self.id}, Name='{self.full_name}', Email='{self.email}')"

# Example usage (no direct DB interaction here, just model definition)
if __name__ == "__main__":
    user1 = User("John Doe", "john.doe@example.com", "securepass")
    print(user1)
    print(user1.to_dict())

    db_row = (1, "Jane Smith", "jane.smith@example.com", "hashedpass123", "2023-01-01 10:00:00")
    user2 = User.from_db_row(db_row)
    print(user2)
