# models/sale.py

import json

class Sale:
    """
    Represents a sales transaction in the PharmaCare system.
    This class acts as a data model for the 'sales' table.
    """
    def __init__(self, customer_name, total_amount, items_json,
                 customer_phone=None, customer_email=None,
                 sale_id=None, sale_date=None):
        """
        Initializes a Sale object.

        Args:
            customer_name (str): Name of the customer.
            total_amount (float): Total amount of the sale.
            items_json (str): JSON string representing the list of items sold.
                              Format: [{"med_id": 1, "qty": 2, "price": 12.5, "name": "Paracetamol"}]
            customer_phone (str, optional): Customer's phone number.
            customer_email (str, optional): Customer's email address.
            sale_id (int, optional): Unique ID of the sale. Auto-generated by DB if None.
            sale_date (str, optional): Timestamp of the sale. Auto-generated by DB if None.
        """
        self.id = sale_id
        self.customer_name = customer_name
        self.customer_phone = customer_phone
        self.customer_email = customer_email
        self.total_amount = total_amount
        self.items_json = items_json # Stored as JSON string
        self.sale_date = sale_date

    def get_items(self):
        """
        Parses the items_json string and returns a list of dictionaries.
        """
        try:
            return json.loads(self.items_json)
        except json.JSONDecodeError:
            return []

    def set_items(self, items_list):
        """
        Converts a list of item dictionaries to a JSON string for storage.
        """
        self.items_json = json.dumps(items_list)

    def to_dict(self):
        """
        Converts the Sale object to a dictionary, useful for database insertion.
        """
        return {
            "customer_name": self.customer_name,
            "customer_phone": self.customer_phone,
            "customer_email": self.customer_email,
            "total_amount": self.total_amount,
            "items_json": self.items_json,
            "id": self.id,
            "sale_date": self.sale_date
        }

    @staticmethod
    def from_db_row(row):
        """
        Creates a Sale object from a database row (tuple).
        Assumes row order: (id, customer_name, customer_phone, customer_email,
                           total_amount, sale_date, items_json)
        """
        if row:
            return Sale(
                sale_id=row[0],
                customer_name=row[1],
                customer_phone=row[2],
                customer_email=row[3],
                total_amount=row[4],
                sale_date=row[5],
                items_json=row[6]
            )
        return None

    def __repr__(self):
        return f"Sale(ID={self.id}, Customer='{self.customer_name}', Total={self.total_amount})"

# Example usage
if __name__ == "__main__":
    items_sold = [
        {"med_id": 1, "name": "Paracetamol", "qty": 2, "price": 12.5},
        {"med_id": 3, "name": "Vitamin D3", "qty": 1, "price": 18.75}
    ]
    sale1 = Sale("Alice Wonderland", 43.75, json.dumps(items_sold), "123-456-7890")
    print(sale1)
    print(sale1.to_dict())
    print("Items:", sale1.get_items())

    db_row = (1, "Bob Builder", "987-654-3210", "bob@example.com", 50.0, "2023-05-02 14:00:00",
              '[{"med_id": 2, "qty": 1, "price": 50.0}]')
    sale2 = Sale.from_db_row(db_row)
    print(sale2)
    print("Items from DB:", sale2.get_items())
